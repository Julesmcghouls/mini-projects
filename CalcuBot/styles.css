/* Calcubot Custom Styles */
body {
    background-color: #eef2f3; /* Soft gray background for a clean look */
    font-family: Arial, sans-serif; /* Simple and readable font */
}

h1 {
    font-size: 2.5rem; /* Emphasized title size */
}

/* Main robot container */
#calcubot {
    width: 300px;
    margin: 0 auto; /* Center the robot */
    background: #555; /* Neutral gray to resemble a robot */
    border-radius: 10px;
    padding: 10px;
    box-shadow: 0 10px 15px rgba(0, 0, 0, 0.2); /* Subtle shadow for 3D effect */
}

/* Robot head */
.head {
    background: #333; /* Darker shade for the head */
    padding: 20px;
    border-radius: 10px;
}

/* Eyes layout */
.eyes {
    display: flex;
    justify-content: space-around;
    margin-bottom: 10px; /* Space between eyes and mouth */
}

/* Individual eye */
.eye {
    width: 20px;
    height: 20px;
    background: #fff; /* White eye background */
    border-radius: 50%; /* Circular shape */
    box-shadow: 0 0 10px #00ffcc; /* Glow effect for fun design */
}

/* Robot mouth */
.mouth {
    width: 60px;
    height: 10px;
    background: #ff6666; /* Red to resemble a smile or neutral mouth */
    margin: 0 auto; /* Centered mouth */
    border-radius: 5px; /* Rounded edges */
}

/* Robot body */
.body {
    background: #666; /* Medium gray body */
    padding: 20px;
    border-radius: 10px;
}

/* Input fields styling */
.input-field {
    width: 80%;
    margin: 5px auto; /* Centered inputs */
    padding: 10px; /* Comfortable padding for typing */
    border: none;
    border-radius: 5px; /* Rounded corners */
}

/* Display result styling */
#result {
    font-size: 1.5rem; /* Larger text for visibility */
    color: #007bff; /* Blue to grab attention */
    font-weight: bold; /* Bold for emphasis */
}

/* Add blinking animation to eyes */
@keyframes blink {
    0%, 20%, 40%, 60%, 80%, 100% {
        background: #fff; /* Normal eye state */
    }
    10%, 30%, 50%, 70%, 90% {
        background: #000; /* Blinking state */
    }
}

.eye {
    animation: blink 5s infinite; /* Slow and natural blinking */
}

/* Mouth animation when computing */
.mouth.computing {
    animation: compute 0.5s infinite alternate; /* Fun mouth movement */
}

@keyframes compute {
    0% {
        transform: scaleY(1); /* Normal state */
    }
    100% {
        transform: scaleY(0.5); /* Compressed state */
    }
}
